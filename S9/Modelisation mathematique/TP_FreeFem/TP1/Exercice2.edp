// Vitesse de convergence sur un carré
// 1.1 Formulation variationnelle
// Bordure carrée
int np; // nombre de points par bord
real[int] Hvalues(5);     // Pour stocker les valeurs de h
real[int] errorsL2(5);    // Pour stocker les erreurs en norme L2

np = 2^7;
mesh Th = square(np, np);

fespace V2(Th, P2);
fespace V1(Th, P1);
fespace V0(Th, P0);

int p = 1, q = 1;

V1 upq = sin(p*pi*x)*sin(q*pi*y);

for (int k = 3; k <= 7; k++) {
    np = 2^k;
    mesh Sh = square(np, np);

    fespace ShV1(Sh, P1);
    fespace ShV0(Sh, P0);

    ShV1 u, v;
    ShV0 f = ((p*pi)^2 + (q*pi)^2) * sin(p*pi*x) * sin(q*pi*y);

    problem Poisson(u, v) = int2d(Sh)(dx(u)*dx(v) + dy(u)*dy(v)) - int2d(Sh)(f*v)
                            + on(1, u = 0) + on(2, u = 0) + on(3, u = 0) + on(4, u = 0);

    Poisson;

    real errL2 = sqrt(int2d(Th)( (u - upq)^2 ));
    errorsL2[k-3] = errL2;
    real h = 1.0 / np;
    Hvalues[k-3] = h;

    cout << "k = " << k << ", np = " << np << ", h = " << h << ", Erreur L2 = " << errL2 << endl;
}

// Afficher les erreurs en échelles logarithmiques
//plot(Hvalues, errorsL2, loglog = true, wait = 1, title = "Convergence en norme L2", xlabel = "h", ylabel = "Erreur L2");

// Calculer l'ordre de convergence (pente de la droite)
real slope = log(errorsL2[4] / errorsL2[0]) / log(Hvalues[4] / Hvalues[0]);
cout << "Ordre de convergence en norme L2 : " << slope << endl;
